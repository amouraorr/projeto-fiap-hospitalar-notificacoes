services:
  postgres:
    image: "postgres:14"
    container_name: "postgres"
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network

  agendamento-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: notification_service_container
    restart: always
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: create
    depends_on:
      - postgres
    ports:
      - "8080:8080"
    networks:
      - app_network

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification_service_container
    restart: always
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    networks:
      - app_network

  kafka:
    image: wurstmeister/kafka:2.13-2.8.0
    container_name: kafka
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - app_network

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
      - app_network

  adminer:
    image: adminer
    container_name: adminer
    depends_on:
      - postgres
    ports:
      - "8181:8080"
    networks:
      - app_network

networks:
  app_network:

volumes:
  postgres_data: